export const en = {
  notifications: 'Notifications',
  settings: 'Settings',
  greetings: 'Hi {{user}}',
  configView: {
    title: 'System configuration',
  },
  language: {
    selectLanguage: 'Select language',
    es: 'Spanish',
    en: 'English',
  },
  theme: {
    selectTheme: 'Select theme',
    light: 'Light',
    dark: 'Dark',
  },
  components: {
    common: {
      noneLabel: 'None',
    },
    button: {
      cancel: 'Cancel',
      process: 'Process',
      confirm: 'Confirm',
      save: 'Save',
      search: 'Search',
    },
    table: {
      actions: 'Actions',
      edit: 'Edit',
      delete: 'Delete',
      search: 'Search',
      emptyData: 'There is no data',
      rowsPerPage: 'Rows per page',
      of: 'of',
    },
    alertResultModal: {
      acceptButtonLabel: 'Accept',
      goBackButtonLabel: 'Go back',
    },
    pdfViewer: {
      notDisplayedMessage: 'Your browser cannot display this PDF file. You can download it',
      notDisplayedBtn: 'here',
    },
  },
  formValidationsErrors: {
    requiredErrorLabel: 'Required field',
  },
  sidebar: {
    paperwork: { title: 'Paperworks' },

    billing: {
      title: 'Billing',
      maintenance: 'Configuration',
      billingManagement: 'Billing management',
      batchBilling: 'Batch billing',
      individualBilling: 'Individual billing',
      electronicBilling: 'Electronic billing',
    },
    portfolio: {
      title: 'Portfolio',
      dashboard: 'Dashboard',
      supplyLots: 'Lots Management',
      debtTransferMassive: 'Massive Debt Transfer',
      debtTransferIndividual: 'Individual Debt Transfer',
      notificationsConfig: 'Notifications',
      partialOperation: 'Partial Operation',
      supplyStatusConfig: 'Supply Status Config',
      lotStatusConfig: 'Lot Status Config',
      invoiceStatusTypeConfig: 'Invoice Status Config',
      homologatedTableConfig: 'Homologated Table Device Configuration',
      legalReturn: 'Legal Return',
      paymentDealType: 'Payment Deal Type Configuration',
      currencyExchangeRateConfig: 'Currency Exchange Rate',
      bankConfig: 'Bank Config',
      cashRegisterStatusConfig: 'Cash Register Status Config',
      cashRegisterConfig: 'Cash Register Config',
      bailAgreement: 'Bail Agreement',
      posProviderConfig: 'POS Provider Configuration',
      posVerifoneConfig: 'POS Verifone Configuration',
    },
    customerExperience: {
      title: 'Customer Experience',
    },
  },
  paths: {
    profile: 'My Profile User',
    home: 'Home',
    'paperworks-administration': 'Paperworks Administration',
    create: 'Create',
    styleguide: 'Styleguide',
    dev: 'Development',
    portfolio: 'Portfolio',
    billing: 'Billing',
    management: 'Billing management',
    batchBilling: 'Batch billing',
    individualBilling: 'Individual billing',
    electronicBilling: 'Electronic billing',
    config: 'Configuration',
    'supply-lots': 'Lots Management',
    detail: 'Lot Detail',
    'debt-transfer': 'Debt Transfer',
    massive: 'Massive',
    individual: 'Individual',
    notifications: 'Notifications',
    'partial-operation': 'Create transactions in the commercial system',
    'supply-status': 'Create supply status',
    'lot-status': 'Create lot status',
    'invoice-status-type': 'Create invoice status',
    'create-supply': 'Create new supply',
    'homologated-table-devices': 'Homologated Table Devices',
    'legal-return': 'Legal Return',
    'payment-deal-type': 'Payment deal type configuration',
    'currency-exchange-rate': 'Currency Exchange Rate',
    bank: 'Bank Config',
    'cash-register-status': 'Cash Register Status Config',
    'cash-register': 'Cash Register Config',
    'pos-provider': 'POS Provider Configuration',
    'pos-verifone': 'Verifone POS Configuration',
  },
  supply: {
    status: {
      active: 'Active',
      inactive: 'Inactive',
      suspended: 'Suspended',
      warning: 'With warnings',
      legalReturn: 'Legal Return',
    },
    operationStatus: {
      pending: 'Pending',
      resolved: 'Solved',
      canceled: 'Cancelled',
    },
  },
  billing: {
    maintenance: {
      cyclesManagement: {
        tabName: 'Billing cycle management',
        cycleFormTitle: 'Billing cycle management',
        searchModalTitle: 'Search cycle',
        searchModalButton: 'Search',
        cycleCodeFormLabel: 'Cycle code',
        descriptionFormLabel: 'Description',
        sectorFormLabel: 'Sector',
        zoneFormLabel: 'Zone',
        frequencyFormLabel: 'Frequency',
        serviceTypeFormLabel: 'Service type',
        billingModeFormLabel: 'Billing mode',
        serviceTypeModalLabel: 'Select the type of service',
        cycleCodeModalLabel: 'Enter the cycle code number',
        searchWithSuccessLabel: 'The cycle search returned results.',
        searchWithErrorLabel1: 'The <b> Code ',
        searchWithErrorLabel2: '</b> does not exit.',
        saveWithSuccessLabel: 'Save with success.',
        saveWithErrorLabel: 'There was a error saving the cycle.',
        saveButtonLabel: 'Save cycle',
        searchButtonLabel: 'Search',
        cancelButtonLabel: 'Cancel',
      },
      routesManagement: {
        tabName: 'Route management',
        routeFormTitle: 'Billing route management',
        searchModalTitle: 'Search route',
        searchModalButton: 'Search',
        routeCodeTableLabel: 'Route code',
        descriptionTableLabel: 'Description',
        cycleTableLabel: 'Cycle',
        sectorTableLabel: 'Sector',
        zoneTableLabel: 'Zone',
        frequencyLabel: 'Frequency',
        serviceTypeLabel: 'Service type',
        billingModeLabel: 'Billing mode',
        saveButtonLabel: 'Save route',
        searchButtonLabel: 'Search',
        cancelButtonLabel: 'Cancel',
        searchWithSuccessLabel: 'The route search returned results.',
        searchWithErrorLabel1: 'The <b> Code ',
        searchWithErrorLabel2: '</b> does not exit.',
        saveWithSuccessLabel: 'Save with success.',
        saveWithErrorLabel: 'There was a error saving the route.',
      },
      ratesManagement: {
        tabName: 'Rate management',
        createModalTitle: 'Create rate',
        confirmModalTitle: 'Confirmation of information',
        rateCodeFormLabel: 'Rate code',
        descriptionFormLabel: 'Description',
        serviceTypeFormLabel: 'Service type',
        serviceTypeConfirmFormLabel: 'Type of service selected',
        interface1FormLabel: 'Interface 1',
        interface2FormLabel: 'Interface 2',
        interface3FormLabel: 'Interface 3',
        ValueInterfacesLabel: 'Interface value',
        filter1FormLabel: 'Filter 1',
        filter2FormLabel: 'Filter 2',
        rateTypeFormLabel: 'Rate type',
        createButtonLabel: 'Create',
        confirmButtonLabel: 'Confirm',
        searchButtonLabel: 'Search',
        cancelButtonLabel: 'Cancel',
        searchWithSuccessLabel: 'The rate search returned results.',
        searchWithErrorLabel1: 'The <b> Code ',
        searchWithErrorLabel2: '</b> does not exit.',
        saveButtonLabel: 'Save',
        saveWithSuccessLabel: 'Save with success.',
        saveWithErrorLabel: 'There was a error saving the rate.',
      },
      chronogramManagement: {
        tabName: 'Chronogram management',
        editModalTitle: 'Edit chronogram',
        detailModalTitle: 'Chronogram detail',
        createModalTitle: 'Create chronogram',
        serviceTypeTableLabel: 'Type service',
        statusTableLabel: 'Status',
        lotTableLabel: 'lot',
        cycleTableLabel: 'Cycle',
        routeTableLabel: 'Route',
        yearTableLabel: 'Year',
        monthTableLabel: 'Month',
        dateReleaseTableLabel: 'Release',
        dateBreakTableLabel: 'Break',
        dateFromTableLabel: 'From',
        dateToTableLabel: 'To',
        billingTableLabel: 'Billing mode',
        startMonthTableLabel: 'Start month',
        endMonthTableLabel: 'End month',
        startReadDayTableLabel: 'Start reading day',
        startReadMonthTableLabel: 'Start reading month',
        endReadDayTableLabel: 'End reading day',
        endReadMonthTableLabel: 'End of reading month',
        createButtonLabel: 'Create chronogram',
        clearSearchButtonLabel: 'Clear search',
        closedButtonLabel: 'Close',
        searchButtonLabel: 'Search',
        saveButtonLabel: 'Save',
        cancelButtonLabel: 'Cancel',
        exportButtonLabel: 'Export',
        saveWithSuccessLabel: 'Save chronogram with success.',
        visibilityIconLabel: 'Detail',
      },
      parameterManagement: {
        tabName: 'Parameter configuration',
        parameterSaveWithSuccessModalTitle: 'Parameter saved',
        parameterSaveWithSuccessModalLabel: 'Parameter saved successfully',
        parameterSaveWithErrorModalTitle: 'An error has occurred',
        parameterSaveWithErrorModalLabel: 'An error occurred while saving the parameter',
        natureConceptModalTitle: 'Configure concept nature',
        taxesModalTitle: 'Configure taxes',
        unitsMeasureModalTitle: 'Configure units of measure',
        calculationMethodModalTitle: 'Configure calculation method',
        serviceGroupModalTitle: 'Configure service group',
        averageBillingModalTitle: 'Configure average billing',
        causesAverageBillingTabsForm: 'Causes of average billing',
        FC_PromAverageBillingTabsForm: 'FC_Prom periods',
        billingTypeModalTitle: 'Configure billing type',
        chargeTypeModalTitle: 'Configure charge type',
        calculationTypeModalTitle: 'Configure calculation type',
        billingModeModalTitle: 'Configure billing mode',
        natureConceptButtonLabel: 'Nature concept',
        taxesButtonLabel: 'Taxes',
        unitsMeasureButtonLabel: 'Units of measure',
        calculationMethodButtonLabel: 'Calculation method',
        serviceGroupButtonLabel: 'Service group',
        averageBillingButtonLabel: 'Average billing',
        billingTypeButtonLabel: 'Billing type',
        chargeTypeButtonLabel: 'Charge type',
        calculationTypeButtonLabel: 'Calculation type',
        billingModeButtonLabel: 'Billing mode',
        descriptionFormLabel: 'Description',
        codeFormLabel: 'Code',
        serviceTypeFormLabel: 'Service type',
        unitsMeasureFormLabel: 'Unit',
        periodFormLabel: 'Periods',
        frequencyFormLabel: 'Frequency',
        saveButtonLabel: 'Save',
        cancelButtonLabel: 'Cancel',
      },
      conceptManagement: {
        tabName: 'Billing concept configuration',
        calculationParametersModalTitle: 'Calculation parameters',
        codeTableLabel: 'Code',
        conceptCodeTableLabel: 'Concept code',
        currencyTableLabel: 'Currency',
        calculationOrderTableLabel: 'Calculation order',
        printOrderTableLabel: 'Print order',
        typeTableLabel: 'Type',
        frequencyTableLabel: 'Frequency',
        valueLimitTableLabel: 'Value limit',
        valueRealTableLabel: 'Real value',
        referenceValueTableLabel: 'Reference value',
        calculationTypeTableLabel: 'Calculation type',
        descriptionTableLabel: 'Description',
        affectsTaxInformationTableLabel: 'Affects tax information',
        natureTableLabel: 'Nature',
        appliesArrearsTableLabel: 'Applies arrears',
        conceptArrearsTableLabel: 'Arrears concept',
        taxTableLabel: 'Taxes',
        unitsMeasureTableLabel: 'Unit of measure',
        typeRateTableLabel: 'Type rate',
        serviceTypeTableLabel: 'Service type',
        calculationMethodTableLabel: 'Calculation method',
        internalBillingModeTableLabel: 'Internal billing mode',
        externalBillingModeTableLabel: 'External billing mode',
        calculationParametersButtonLabel: 'Calculation parameters',
        formulaButtonLabel: 'Formula',
        cancelButtonLabel: 'Cancel',
        saveButtonLabel: 'Save',
      },
      tariffSchedulesManagement: {
        tabName: 'Tariff schedule management',
        editTariffSchedulesModalTitle: 'Edit tariff schedule',
        saveWithErrorModalTitle: 'Error generating tariff schedule',
        saveWithSuccessModalTitle: 'Tariff schedule generated',
        editWithSuccessModalTitle: 'Changes saved',
        filterFieldsTitleFormLabel: 'Filter fields',
        tariffSchedulesTableTitle: 'Tariff schedules',
        generateButtonLabel: 'Generate',
        clearSearchButtonLabel: 'Clear search',
        visualizeButtonLabel: 'Visualize',
        cancelButtonLabel: 'Cancel',
        saveButtonLabel: 'Save',
        editButtonLabel: 'Edit',
        serviceTypeFormLabel: 'Service type',
        currencyFormLabel: 'Currency',
        codeConceptFormLabel: 'Concept code',
        conceptDescriptionFormLabel: 'Concept description',
        fromDateFormLabel: 'From date',
        toDateFormLabel: 'To date',
        realValueFormLabel: 'Real value',
        referenceValueFormLabel: 'Reference value',
        calculationTypeFormLabel: 'Calculation type',
        typeRateFormLabel: 'Rate type',
        createDateTableLabel: 'Creation date',
        codeFormLabel: 'Code',
        statusFormLabel: 'Status',
        rateTableLabel: 'Rate',
        conceptTableLabel: 'Concept',
        saveWithSuccessLabel: 'The tariff schedule has been generated',
        saveWithErrorLabel: 'Filter Fields: From Date and To Date should not be selected.',
        editWithSuccessLabel: 'The data has been successfully modified and the values have been saved.',
        saveWithErrorLabel2: 'Service type and currency fields are not selected.',
      },
    },
    batchBilling: {
      readingImport: {
        tabName: 'Reading Import',
        resultFieldsTitleFormLabel: 'Result Fields',
        customerTypeFormLabel: 'Customer type to invoice',
        cycleCodeFormLabel: 'Cycle code',
        routeCodeFormLabel: 'Route code',
        yearFormLabel: 'Year',
        monthFormLabel: 'Month',
        serviceTypeFormLabel: 'Service type',
        fromDateFormLabel: 'From date',
        toDateFormLabel: 'To date',
        statusTableLabel: 'Status',
        orderCodeTableLabel: 'Order number',
        supplyTableLabel: 'Supply',
        companyTableLabel: 'Company',
        customerNameTableLabel: 'Customer name',
        actionTableLabel: 'Action',
        routeCodeTableLabel: 'Route code',
        meterCodeTableLabel: 'Meter number',
        readingTableLabel: 'Reading',
        cancelButtonLabel: 'Cancel',
        generateButtonLabel: 'Generate',
        clearSearchButtonLabel: 'Clear search',
      },
      criticalReading: {
        tabName: 'Critical reading',
        criticalReadingTitleFormLabel: 'Critical reading',
        readingWorkOrdersTitleTableLabel: 'Reading work orders',
        typeCustomerFormLabel: 'Customer Type to invoice',
        cycleCodeFormLabel: 'Cycle code',
        routeCodeFormLabel: 'Route code',
        yearFormLabel: 'Year',
        monthFormLabel: 'Month',
        serviceTypeFormLabel: 'Service type',
        supplyFormLabel: 'Supply',
        lotCodeFormLabel: 'Lot',
        statusFormLabel: 'Status',
        meterCodeFormLabel: 'Meter',
        serialCodeFormLabel: 'Serial number',
        conceptCodeFormLabel: 'Concept',
        codeReadingFormLabel: 'Reading',
        typeServicesFormLabel: 'Service type',
        typeReadingFormLabel: 'Reading type',
        consumptionFormLabel: 'Consumption',
        periodFormLabel: 'Period',
        statusTableLabel: 'Status',
        downloadDateTableLabel: 'Download date',
        supplyTableLabel: 'Supply',
        cycleCodeTableLabel: 'Cycle code',
        routeCodeTableLabel: 'Route code',
        typeCustomerTableLabel: 'Customer type to invoice',
        meterCodeTableLabel: 'Meter',
        quantityReadingsTableLabel: 'Quantity of readings',
        visibilityIconLabelTableLabel: 'View',
        cancelButtonLabel: 'Cancel',
        searchButtonLabel: 'Search',
        saveButtonLabel: 'Save',
        editButtonLabel: 'Edit',
        generateButtonLabel: 'Generate provisional',
        generateSuccessLabel: 'Provisional has been generated for supply ',
        generateSuccessModalTitle: 'Generating provisional',
        generateErrorLabel: 'An error has occurred',
        generateErrorModalTitle: 'Error generating provisional',
      },
      provisionalBilling: {
        tabName: 'Provisional billing',
        provisionalBillingTitleFormLabel: 'Provisional billing',
        typeCustomerFormLabel: 'Type customer to billing',
        cycleCodeFormLabel: 'Cycle code',
        yearFormLabel: 'Year',
        monthFormLabel: 'Month',
        lotFormLabel: 'Lot',
        supplyTableLabel: 'Supplies',
        customerNameTableLabel: 'Customer',
        contractedPowerTableLabel: 'Contracted power',
        routeCodeTableLabel: 'Route code',
        rateDescriptionTableLabel: 'Rate descriptions',
        meterCodeTableLabel: 'Meter',
        billingDateTableLabel: 'Billing date',
        currentReadingDateTableLabel: 'Current reading date',
        daysToBilledTableLabel: 'Days to billed',
        currentReadingTableLabel: 'Current reading',
        previousReadingDateTableLabel: 'Previous reading date',
        previousReadingTableLabel: 'Previous reading',
        multipleTableLabel: 'Multiple',
        KWHBilledTableLabel: 'KWH billed',
        KWHPowerReceivedTableLabel: 'KWH power received',
        rateTableLabel: 'Rate',
        consumptionVariationTableLabel: 'Consumption variation',
        consumptionBilledTableLabel: 'Billed consumption',
        billedArrearsTableLabel: 'Billed arrears',
        fixedChargesTableLabel: 'Fixed charges',
        powerDeliveryTableLabel: 'Power delivery',
        receivedPowerTableLabel: 'Received power',
        billedPowerTableLabel: 'Billed power',
        otherConceptsTableLabel: 'Other concepts',
        totalReceiptTableLabel: 'Total receipt',
        cancelButtonLabel: 'Cancel',
        searchButtonLabel: 'Search',
        saveButtonLabel: 'Save',
        editButtonLabel: 'Edit',
        confirmButtonLabel: 'Confirm provisional',
        generateSuccessLabel: 'Provisional has been generated for supply ',
        generateSuccessModalTitle: 'Generating provisional',
        generateErrorLabel: 'An error has occurred',
        generateErrorModalTitle: 'Error Generating Provisional',
        confirmSuccessLabel: 'The following actions have been performed',
        confirmSuccessLabel2:
          'The data for each column related to each <b>Supply</b> has been locked.<br/> The billings related to each <b>Supply</b> have been processed.<br/> The following charges related to the <b>Supply</b> have been made.<br/>',
      },
      generateBillingArchive: {
        tabName: 'Billing archive',
        generateBillingArchiveTitleFormLabel: 'Provisional billing',
        supplyTableLabel: 'Supplies',
        customerNameTableLabel: 'Customer',
        contractedPowerTableLabel: 'Contracted power',
        routeCodeTableLabel: 'Route code',
        rateDescriptionTableLabel: 'Rate descriptions',
        meterCodeTableLabel: 'Meter',
        billingDateTableLabel: 'Billing date',
        currentReadingDateTableLabel: 'Current reading date',
        daysToBilledTableLabel: 'Days to bill',
        currentReadingTableLabel: 'Current reading',
        previousReadingDateTableLabel: 'Previous reading date',
        previousReadingTableLabel: 'Previous reading',
        multipleTableLabel: 'Multiple',
        KWHBilledTableLabel: 'KWH Billed',
        KWHPowerReceivedTableLabel: 'KWH power received',
        rateTableLabel: 'Rate',
        consumptionVariationTableLabel: 'Consumption variation',
        consumptionBilledTableLabel: 'Billed consumption',
        billedArrearsTableLabel: 'Billed arrears',
        fixedChargesTableLabel: 'Fixed charges',
        powerDeliveryTableLabel: 'Power delivery',
        receivedPowerTableLabel: 'Received power',
        billedPowerTableLabel: 'Billed power',
        otherConceptsTableLabel: 'Other concepts',
        totalReceiptTableLabel: 'Total receipt',
        cancelButtonLabel: 'Cancel',
        searchButtonLabel: 'Search',
        saveButtonLabel: 'Save',
        editButtonLabel: 'Edit',
        confirmButtonLabel: 'Confirm provisional',
        confirmSuccessLabel: 'The billing file has been confirmed',
        confirmSuccessModalTitle: 'Generating billing file',
        confirmErrorLabel: 'An error has occurred',
        confirmErrorModalTitle: 'Error generating billing file',
      },
    },
    individualBilling: {
      individualBilling: {
        tabName: 'Individual billing',
        individualBillingTitleFormLabel: 'Individual billing',
        individualBillingTitleTableLabel: 'Result',
        serviceTypeFormLabel: 'Service type',
        supplyCodeFormLabel: 'Supply code',
        customerNameFormLabel: 'Customer name',
        RNCFormLabel: 'Tax identification number (RNC)',
        identificationCardFormLabel: 'Identification card',
        cycleCodeFormLabel: 'Cycle code',
        routeCodeFormLabel: 'Route code',
        fromDateFormLabel: 'From date',
        toDateFormLabel: 'To date',
        yearFormLabel: 'Year',
        monthFormLabel: 'Month',
        statusTableLabel: 'Status',
        supplyCodeTableLabel: 'Supply code',
        customerNameTableLabel: 'Customer',
        contractedPowerTableLabel: 'Contracted power',
        routeCodeTableLabel: 'Route code',
        rateDescriptionTableLabel: 'Rate descriptions',
        meterCodeTableLabel: 'Meter code',
        billingDateTableLabel: 'Billing date',
        currentReadingDateTableLabel: 'Current reading date',
        currentReadingTableLabel: 'Current reading',
        previousReadingDateTableLabel: 'Previous reading date',
        previousReadingTableLabel: 'Previous reading',
        multipleTableLabel: 'Multiple',
        KWHBilledTableLabel: 'KWH Billed',
        KWHPowerReceivedTableLabel: 'KWH Power received',
        rateTableLabel: 'Rate',
        consumptionBilledTableLabel: 'Billed consumption',
        billedArrearsTableLabel: 'Billed arrears',
        fixedChargesTableLabel: 'Fixed charges',
        powerDeliveryTableLabel: 'Power delivery',
        receivedPowerTableLabel: 'Received power',
        billedPowerTableLabel: 'Billed power',
        otherConceptsTableLabel: 'Other concepts',
        totalReceiptTableLabel: 'Total receipt',
        processButtonLabel: 'Process',
        generateButtonLabel: 'Generate',
        confirmButtonLabel: 'Confirm',
        saveButtonLabel: 'Save',
        editButtonLabel: 'Edit',
        cancelButtonLabel: 'Cancel',
        clearButtonLabel: 'Clear fields',
        editModalTitle: 'Edit supply ',
        generateModalTitle: 'Provisional billing',
        errorModalTitle: 'Error',
        errorLabel: 'An error has been generated',
        confirmModalTitle: 'Confirm billing',
        confirmModalLabel: 'You are about to confirm the billing and block it, Do you wish to continue?',
        confirmWithSuccessLabel: 'Billing status has been changed to <b>confirmed billing</b>.',
        editWithSuccessModalTitle: 'Saved changes',
        editWithSuccessLabel: 'Changes made to the supply have been saved',
        generateWithSuccessLabel: 'Billing status has been changed to <b>billing provisional</b>.',
      },
    },
    electronicBilling: {
      electronicBillStamping: {
        tabName: 'Stamping of electronic billing',
        filterFieldsTitleFormLabel: 'Filter fields',
        cycleCodeFormLabel: 'Cycle',
        routeCodeFormLabel: 'Route',
        fromDateFormLabel: 'From date',
        toDateFormLabel: 'To date',
        resultFieldsTitleTableLabel: 'Result fields',
        statusLabel: 'Status',
        supplyIdTableLabel: 'Supply number',
        companyNameTableLabel: 'Name or company name',
        customerIdTableLabel: 'ID',
        typeIdTableLabel: 'ID Type',
        cycleIdTableLabel: 'Cycle',
        dateIssueTableLabel: 'Date of issue',
        conceptDescriptionTableLabel: 'Concept description',
        rateIdTableLabel: 'Rate',
        rateTypeTableLabel: 'Type rate',
        currencyIdTableLabel: 'Currency',
        exchangeRateTableLabel: 'Exchange rate',
        priceUnitTableLabel: 'Unit price',
        ITBISTableLabel: 'IBTIS',
        subtotalWithoutITBISTableLabel: 'Subtotal without ITBIS',
        totalTableLabel: 'Total',
        ENFCTableLabel: 'Electronic tax voucher number (E-NCF)',
        transactionTypeTableLabel: 'Transaction type',
        expirationDateTableLabel: 'Due date',
        formOfPaymentTableLabel: 'Payment method',
        messageWithErrorLabel: 'An error has occurred',
        sendWithSuccessLabel: 'The selected invoices have been sent to the Stamping process.',
        sendTitleLabel: 'Send to stamp',
        selectedRegistersLabel: 'Selected records',
        updateButtonLabel: 'Update',
        onClearFormFilter: 'Clear fields',
        sendButtonLabel: 'Send to stamp',
      },
    },
  },
  portfolio: {
    common: {
      supplyList: 'Supply List',
      searchModal: {
        byClientOrSupplyTitle: 'Search by customer or supply',
        bySupplyTitle: 'Find Supply',
        clientLabel: 'Client',
        supplyLabel: 'No. of Supply',
        errors: {
          supplyNotFound: 'Supply not found',
        },
      },
      lotStatus: {
        suspended: 'Suspended',
        disconnected: 'Disconnected',
        sentToLegal: 'Sent to Legal',
        penalized: 'Penalized Portfolio',
      },
      lotType: {
        suspension: 'Suspension',
        verification: 'Verification',
        removal: 'Removals',
        legal: 'Legal',
        prelegal: 'Pre-Legal',
      },
    },
    dashboard: {
      pageTitle: 'Portfolio Dashboard',
      notices: 'Notices',
      supplyLotsManagement: 'Manage Lots',
      massiveDebtTransfer: 'Massive Debt Transfer',
      individualDebtTransfer: 'Individual Debt Transfer',
      createOperation: 'Create operations',
      legal: 'Legal',
      operationManagement: 'Manage Operations',
      paymentPlans: 'Payment Plans',
      creditManagement: 'Manage Credits',
      depositManagement: 'Manage Deposits',
      settings: 'Settings',
      otherSettings: 'Other Settings',
    },
    supplyLots: {
      pageTitle: 'Lots Management in the trading system',
      table: {
        title: 'Lot list',
        lotStatus: 'Status',
        lotNumber: 'Lot number',
        lotCreationDate: 'Creation Date',
        fullName: 'Name',
        supplyQuantity: 'Supplies',
        amountLate: 'Due amount',
        collectionAmount: 'Amount collected',
        lotUpdateDate: 'Update Date',
        type: 'Type',
        cell: {
          lotNumber: '000000000{{lotNumber}}',
        },
        customActions: {
          seeDetails: 'See lot',
        },
      },
    },
    supplyLotDetail: {
      dialogTitle: 'Supply Lot Table',
      table: {
        supplyNumber: 'Supply',
        measureNumber: 'Meter',
        clientName: 'Client',
        amountLate: 'Amount overdue',
        route: 'Route',
        supplyStatus: 'Status',
        currency: 'Currency',
        operationStatus: 'Operation Status',
        collectionAmount: 'Collected Amount',
        customActions: {
          verify: 'Verify',
          remove: 'Remove',
          sendToLegal: 'Send to legal',
          debtTransfer: 'Transfer debt and punish',
          delete: 'Delete',
          process: 'Process',
          dialogTitle: 'Confirm action',
          confirmationMessage: 'Are you sure you want to continue the operation for "{{ actionName }}" supply "{{ supply }}"?',
        },
      },
    },
    debtTransferMassive: {
      pageTitle: 'Massive Debt Transfer',
      lotLabel: 'Lot',
      selectLotLabel: 'Select Lot',
      table: {
        debtSupply: 'Debt supply',
        destinationSupply: 'Destination Supply',
        supplyNumber: 'Supply',
        amountLate: 'Amount',
        supplyStatus: 'Status',
      },
    },
    debtTransferIndividual: {
      pageTitle: 'Individual debt transfer',
      clientLabel: 'Client',
      searchSuppliesLabel: 'Search Customer Supplies',
      selectDebtSupplyLabel: 'Select Debt Supply',
      selectDestinationSupplyLabel: 'Select destination supply',
      table: {
        debtSupply: 'Debt supply',
        destinationSupply: 'Destination Supply',
        supplyNumber: 'Supply',
        amountLate: 'Amount',
        supplyStatus: 'Status',
      },
      buttons: {
        search: 'Search',
        cancel: 'Cancel',
        process: 'Process',
      },
    },
    notificationConfig: {
      pageTitle: 'Notification Configuration',
      notificationSelectorTitle: 'Select the type of notification and service you want to configure',
      notificationEditorTitle: 'Set the selected notification: {{notificationNumber}}',
      selectServiceTypeLabel: 'Select Service Type',
      selectNotificationLabel: 'Select Notification',
      selectSendingTypeLabel: 'Select Sending Type',
      selectChannelLabel: 'Select Channel',
      selectPeriodicityLabel: 'Select Periodicity',
      description: 'Description',
      message: 'Message',
      days: 'Days',
      buttons: {
        notificationEditor: 'Notification Creator',
        saveConfig: 'Save Configuration',
      },
    },
    partialOperation: {
      pageTitle: 'Create transactions in the commercial system',
      sectionFormTitle: 'Parcial Operation',
      form: {
        contractNumberLabel: 'Contract number',
        contractTypeLabel: 'Contract type',
        meterNumberLabel: 'Meter number',
        serviceTypeLabel: 'Type of service',
        companyLabel: 'Company',
        orderTypeLabel: 'Order type',
        reasonLabel: 'Reason',
      },
      table: {
        title: 'Table of invoices',
        invoiceNumber: 'Invoice number',
        invoiceDate: 'Invoice Date',
        expirationDate: 'Expiration Date',
        invoiceAmount: 'Invoice amount',
        pendingAmount: 'Pending amount',
      },
      buttons: {
        createOperation: 'Generate operation',
      },
      notFoundAlert: {
        title: 'Supply does not exist',
        message: 'The supply was not found, check the information entered and try again',
      },
      successCreationAlert: {
        title: 'Operation generated',
        message: 'The partial operation has been created successfully',
      },
    },
    supplyStatusConfig: {
      entityName: 'Status',
      fullEntityName: 'Supply status',
      pageTitle: 'Configuration of supply status',
      tableTitle: 'Supply Status List',
    },
    lotStatusConfig: {
      entityName: 'Status',
      fullEntityName: 'Lot status',
      pageTitle: 'Configuration of lot status',
      tableTitle: 'Lot Status List',
    },
    invoiceStatusTypeConfig: {
      entityName: 'Type of state',
      fullEntityName: 'Invoice status type',
      pageTitle: 'Invoice status config',
      tableTitle: 'List of invoice status',
      labels: {
        code: 'Acronym',
      },
    },
    homologatedTableDevicesConfig: {
      entityName: 'Team',
      fullEntityName: 'Homologated table equipment',
      pageTitle: 'Devices configuration of the Homologated table',
      tableTitle: 'List of homologated table equipment',
      labels: {
        nominalPower: 'Nominal power (kW)',
        useHours: 'Use hours (use/day)',
        useDays: 'Use days (use/month)',
        totalReadings: 'Readings',
        devices: 'Devices',
        energyKWh: 'Energy kWh',
        estimatedEnergyKWh: 'Estimated kWh',
      },
    },
    legalReturn: {
      pageTitle: 'Legal Return',
      tableTitle: 'List of supplies processed',
      selectFileSectionTitle: 'Select the file you want to process',
      labels: {
        supplyNumber: 'Supply Number',
        put: 'Measurer Number',
        clientName: 'Client Name',
        amountLate: 'Amount Late',
        route: 'Route',
        fileToImport: 'Excel file to import',
      },
    },
    paymentDealTypeConfig: {
      entityName: 'Deal type',
      fullEntityName: 'Type of payment deal',
      pageTitle: 'Configuration of payment deal types',
      tableTitle: 'List of payment deal types',
      labels: {
        name: 'Name of deal',
        interestPercent: '% Interest',
        penaltyPercent: '% of Penalty',
      },
    },
    currencyExchangeRateConfig: {
      entityName: 'Rate',
      fullEntityName: 'Exchange Rate',
      pageTitle: 'Currency Exchange Rate',
      tableTitle: 'List of Exchange Rates',
      labels: {
        company: 'Company',
        baseCurrency: 'Base Currency',
        rateCurrency: 'Rate Currency',
        rate: 'Rate',
      },
    },
    bankConfig: {
      entityName: 'Bank',
      fullEntityName: 'Bank',
      pageTitle: 'Bank Config',
      tableTitle: 'List of banks',
    },
    cashRegisterStatusConfig: {
      entityName: 'Status',
      fullEntityName: 'Cash register status',
      pageTitle: 'Configuration of cash register status',
      tableTitle: 'Cash Register Status List',
    },
    cashRegisterConfig: {
      entityName: 'Cash Register',
      fullEntityName: 'Cash register',
      pageTitle: 'Configuration of cash register',
      tableTitle: 'Cash Register List',
      labels: {
        currency: 'Currency',
        type: 'Type',
        closingType: 'Closing Type',
        account: 'Account',
        closingDate: 'Closing Date',
        bank: 'Bank',
        status: 'Status',
      },
    },
    posProviderConfig: {
      entityName: 'POS Provider',
      fullEntityName: 'POS Provider',
      pageTitle: 'POS Provider Configuration',
      tableTitle: 'List of POS Providers',
      labels: {
        commission: '% commission',
      },
      validations: {
        commissionRangeValue: 'Commission must have a value between 0 and 100',
      },
    },
    posVerifoneConfig: {
      entityName: 'POS',
      fullEntityName: 'POS Verifone',
      pageTitle: 'Verifone POS Configuration',
      tableTitle: 'Verifone POS List',
      labels: {
        provider: 'Provider',
        commission: '% commission',
      },
    },
  },
  paperworks: {
    btnBack: 'Back',
    btnSave: 'Save',
    btnCreate: 'Create',
    btnUpdate: 'Update',
    btnCancel: 'Cancel',
    tabsTitle: {
      general: 'General',
      states: 'States',
      sectors: 'Sectors / Areas',
      stateTransitions: 'State Transitions',
      reasons: 'Reasons',
      parameters: 'Parameters',
    },
    errors: {
      requiredField: 'This field is required',
      typeNotFount: 'Type not found',
    },
    alertResultModal: {
      acceptButtonLabel: 'Accept',
      createSuccessLabel: 'Successfully created the {{entityName}}.',
      createSuccessModalTitle: 'Creation Process',
      createErrorLabel: 'Could not create the {{entityName}}.',
      createErrorModalTitle: 'Error',
      updateSuccessLabel: 'Successfully updated the {{entityName}}.',
      updateSuccessModalTitle: 'Update Process',
      updateErrorLabel: 'Could not update the {{entityName}}.',
      updateErrorModalTitle: 'Error',
      deleteSuccessLabel: 'Successfully deleted the {{entityName}}.',
      deleteSuccessModalTitle: 'Deletion Process',
      deleteErrorLabel: 'Could not delete the {{entityName}}.',
      deleteErrorModalTitle: 'Error',
      deleteConfirmationTitle: 'Confirm',
      deleteConfirmationMessage: 'Are you sure you want to delete this {{entityName}}?',
      alreadySelected: 'The {{entityName}} sector was previously added',
    },
    paperworksListForm: {
      paperworkType: 'Type of procedure',
      code: 'Procedure code',
      paperworkName: 'Procedure name',
      buttonSearch: 'Search',
      buttonCreate: 'Create Procedure',
    },
    paperworksListTable: {
      title: 'Paperworks List',
      column1: 'Types of procedures',
      column2: 'Procedure code',
      column3: 'Procedure name',
      column4: 'Description',
    },
    createState: {
      fieldCode: 'State code',
      fieldTask: 'Associated task',
      fieldGenerateWO: 'Generates work order?',
      fieldTypeWO: 'WO type',
      fieldReportOptions: 'Report',
      fieldWaitEndWO: 'Wait for the end of the WO to continue?',
      fieldStartPaperwork: 'Starts paperwork',
      fieldBrigade: 'Mandatory brigade entry',
      fieldReport: 'Issues report',
      fieldEndPaperwork: 'Ends paperwork',
      fieldObservations: 'Mandatory entry of observations',
    },
    generalTab: {
      fieldShortName: 'Paperwork name',
      fieldTypePaperwork: 'Type of paperwork',
      fieldPriority: 'Priority',
      fieldRequiredUserSupply: 'Requires User / Supply',
      fieldDays: 'Days',
      fieldHours: 'Hours',
      fieldMinutes: 'Minutes',
      fieldDescription: 'Description',
      modalRestrictionTitle: 'Restricted',
      modalRestrictionMessage:
        'In order to open another tab for the creation of the process, you must first save the data that you have created in the "General" section.',
      modalRestrictionBtn: 'Accept',
      validations: {
        minimumValue: 'The minimum value must be 0',
        confirmDialogTitle: 'Confirm deletion',
        confirmDialogMessage: 'Are you sure you want to delete this procedure?',
      },
      alertResultModal: {
        acceptButtonLabel: 'Accept',
        createSuccessLabel: 'Procedure successfully created.',
        createSuccessModalTitle: 'Creation Process',
        createErrorLabel: 'Unable to create the procedure.',
        createErrorModalTitle: 'Error',
        updateSuccessLabel: 'Procedure successfully updated.',
        updateSuccessModalTitle: 'Update Process',
        updateErrorLabel: 'Unable to update the procedure.',
        updateErrorModalTitle: 'Error',
        deleteSuccessLabel: 'Procedure successfully deleted.',
        deleteSuccessModalTitle: 'Deletion Process',
        deleteErrorLabel: 'Unable to delete the procedure.',
        deleteErrorModalTitle: 'Error',
        deleteConfirmationTitle: 'Confirm',
        deleteConfirmationMessage: 'Are you sure you want to delete this procedure?',
      },
    },
    stateTab: {
      entityName: 'state',
      tableTitle: 'State',
      modalTitle: 'Create State',
      modalTitleUpdate: 'Update State',
      btnFilter: 'Search',
      column1Title: 'Code',
      column2Title: 'Name',
      column3Title: 'Starts',
      column4Title: 'Ends',
      column5Title: 'Associated Task',
      startingYes: 'Yes',
      startingNo: 'No',
      btnCreateState: 'Create State',
      fieldCode: 'Code',
      fieldName: 'Name',
      fieldStart: 'Starts',
      fieldEnd: 'Ends',
      fieldTask: 'Associated task',
      errorStateCodeAlreadySelected: 'The selected state code was previously added to another state',
    },
    create: {
      pageTitle: 'Create procedure',
      mainButton: 'Create',
    },
    update: {
      pageTitle: 'Update procedure',
      mainButton: 'Update',
    },
    sectorsAreasTab: {
      entityName: 'sector',
      addButton: 'Add',
      tableSectorsAllowedToGenerateTitle: 'Sectors that can generate this type of process',
      tableSectorsAllowedToSeeTitle: 'Sectors that can view this type of process by State',
      titleModalSectorsAllowedToGenerate: 'Add sector that can generate this type of procedure',
      titleModalSectorsAllowedToGenerateEdit: 'Edit sector that can generate this type of procedure',
      titleModalSectorsAllowedToSee: 'Add sector that can see this type of procedure by state',
      titleModalSectorsAllowedToSeeEdit: 'Edit sector that can see this type of procedure by state',
      sectorCodeFieldTitle: 'Select the sector code',
      stateCodeFieldTitle: 'Select the state code',
      descriptionFieldTitle: 'Description',
      btnCreate: 'Save',
      btnCancel: 'Cancel',
      errorSectorCodeAlreadySelected: 'The selected sector was previously added',
      messageAlerts: {
        titleModalSectorsAllowedToGenerate: 'Add Sector that can generate this type of process',
        titleModalSectorsAllowedToSee: 'Add sector that can view this type of process by state',
        successAddMessage: 'Sector successfully added',
        errorAddMessage: 'Sector could not be added',
        successDeleteMessage: 'Sector successfully deleted',
        errorDeleteMessage: 'Sector could not be deleted',
        btnModal: 'Accept',
      },
      tableAllowedToGenerate: {
        titleColumn1: 'Code',
        titleColumn2: 'Description',
      },
      tableAllowedToSee: {
        titleColumn1: 'Code',
        titleColumn2: 'Update',
        titleColumn3: 'Description',
        updateYes: 'Yes',
        updateNo: 'No',
      },
    },
    stateTransitionTab: {
      entityName: 'Transition of states',
      modalItemValidation: {
        buttonText: 'Accept',
        message: 'This state already exists in the list',
        modalTitle: 'State validation',
      },
      selectState: 'Select a state',
      btnAdd: 'Add',
      btnSave: 'Save',
      noStatesData: 'We are sorry, there are currently no states available. Please create new states to proceed.',
    },
    reasonsTab: {
      entityName: 'Reason',
      column1Title: 'Code',
      column2Title: 'Description',
      tableTitle: 'Reasons',
      addButton: 'Add',
      modalAddReason: {
        title: 'Add a reason',
        titleEdit: 'Edit a reason',
        labelSelect: 'Select a reason',
        btnCancel: 'Cancel',
        btnCreate: 'Save',
        descriptionFieldTitle: 'Description',
      },
    },
    parametersTab: {
      entityName: 'Parameter',
      column1Title: 'Code',
      column2Title: 'Description',
      column3Title: 'Parameter Value',
      columnNameTitle: 'Name',
      addButton: 'Add',
      tableTitle: 'Parameters',
      fieldParameterValue: 'Parameter Value',
      modalAddParameter: {
        title: 'Add a parameter',
        titleEdit: 'Edit a parameter',
        labelSelect: 'Select a parameter',
        btnCancel: 'Cancel',
        btnCreate: 'Save',
        nameFieldTitle: 'Name',
        valueFieldTitle: 'Value',
        descriptionFieldTitle: 'Description',
      },
      messageAlerts: {
        successTitle: 'Success',
        successAddMessage: 'Parameter successfully added',
        errorAddMessage: 'Could not add the parameter',
        successDeleteMessage: 'Parameter successfully deleted',
        errorDeleteMessage: 'Could not delete the parameter',
        btnModal: 'Accept',
      },
    },
  },
  catalog: {
    fields: {
      id: 'ID',
      name: 'Name',
      code: 'Code',
      description: 'Description',
    },
    actions: {
      create: 'Create {{entityName}}',
      update: 'Update {{entityName}}',
      delete: 'Delete {{entityName}}',
      deleteConfirmationMessage: 'Are you sure you want to delete the selected {{ entityName }} <b>"{{ itemValue }}"</b>?',
    },
  },
  workflow: {
    title: 'Customer Experience',
    description: 'Select a paperwork',
    nullData: 'There is no data',
    paperworkCategories: {
      wo: 'Work Order',
      claim: 'Reclamo',
      services: 'Servicios',
    },
  },
  customerExperience: {
    workflowButtons: {
      back: 'Back',
      transferToCashier: 'Transfer customer to cashier',
      finishPaperwork: 'Finish paperwork',
      next: 'Next',
    },
    createNewSupply: {
      customerToExperience: 'Customer Experience',
      titleCreateNewSupply: 'Create New Supply',
      selectCompany: 'Select the company',
      serviceType: 'Type of service',
      idType: 'ID type',
      contractType: 'Type of contract',
      clientId: 'Client ID',
      contractCurrency: 'Contract currency',
      businessName: 'Name or business name',
      clientType: 'Client type',
      propertyCondition: 'Property condition',
      civilStatus: 'Marital status',
      gender: 'Sex',
      nameSpouse: "Spouse's first and last name",
      phone: 'Phone',
      idSpouse: 'Cedula del conjugue',
      phoneSpouse: "Spouse's phone",
      requestType: 'Request type',
      email: 'Email',
      rateType: 'Rate type',
      continueRequest: 'Evolve process',
      userCreatedSuccess: 'User created successfully!',
      createdUser: 'User created',
      userCreatedError: "For some reason we couldn't create the user. Try again.",
      errorCreateUser: 'Error creating user',
      prepaid: 'Prepaid',
      postPaid: 'Postpaid',
      realOwner: 'Physical person owner',
      realTenant: 'Physical Person Tenant',
      juridicOwner: 'Legal person owner',
      juridicTenant: 'Legal Person Tenant',
      condominiumGovernmental: 'Condominium, Government',
      groupWithoutLucre: 'Non-profit association',
      others: 'Others',
      own: 'Own',
      rent: 'Rented',
      single: 'Single',
      married: 'Married',
      freeJoin: 'Free Join',
      divorced: 'Divorced',
      widower: 'Widower',
      female: 'Female',
      male: 'Masculine',
      residential: 'Residential',
      commercial: 'Commercial',
      works: 'Works',
    },
    contactReport: {
      titleChangePrepay: 'CHANGE FROM POSTPAID TO PREPAID',
      contactReport: 'Contact Report',
      exit: 'Exit',
      continue: 'Evolve process',
      transferProcess: 'Transfer procedure to another ATC',
      digitalPayment: 'Digital Payment',
      sendContractEmail: 'Email contract sent',
      emitReportContract: 'Emit contract report',
      cancel: 'Cancel',
      maxDeposit: 'The deposit exceeds the allowed amount',
      returnDeposit: 'Deposit refund',
      return: 'Return',
      viewReportDeposit: 'view Deposit Information',
      view: 'view',
      uploadDocument: 'Document upload',
      load: 'Load',
      withoutFile: 'Without Attachment',
      uploadSucces: 'File uploaded successfully',
      accept: 'accept',
      noCanContinue: 'Cannot proceed due to insufficient funds',
      createOp: 'Create OP',
      inProcess: 'In process',
      decline: 'Decline',
      missingClient: 'Missing Client',
      systemError: 'System Error',
      cashInReview: 'Cash in review',
      requestState: 'Process status',
      youCanChangeStatus: 'You can change the status of the process',
      returnATCSuccess: 'The transaction has been returned to the Customer Service Agent (ATC)',
    },
    changeContract: {
      titleChangePrepay: 'CHANGE FROM POSTPAID TO PREPAID',
      returnDeposit: 'Deposit refund',
      clientWithDeposit: 'Client with deposit',
      exit: 'Exit',
      transferProcess: 'Transfer Procedure to another ATC',
      finishRequest: 'FINISH process',
      createOp: 'Create op',
      yes: 'Yes',
      no: 'No',
      transferRequest: 'Transfer procedure to another ATC',
      areYouSureTransfer: 'Are you sure to transfer the procedure to another ATC agent?',
      cancel: 'Cancel',
      transfer: 'transfer',
      accept: 'accept',
      requestTransferSuccess: 'Process transferred successfully',
      agentNoAvailable: 'ATC agent not available. The customer has been assigned to the queue of turns to attend to.',
      return: 'Return',
      continue: 'Continue',
      paymentLink: 'Payment link',
      phone: 'Phone',
      email: 'Email',
      whatsapp: 'WhatsApp',
      sendLinkSuccess: 'Payment link sent successfully',
      rowButtons: 'Action Buttons Segment',
    },
    creditRating: {
      customerToExperience: 'Customer Experience',
      dataClient: 'Client data',
      creditRatingExternal: 'External credit rating',
      company: 'Company',
      idType: 'ID type',
      businessName: 'Name or business name',
      clientId: 'Client ID',
      next: 'Next',
      rdBuroBalance: 'Balance in the current bureau overdue in RD$',
      resultCreditRating: 'Credit rating result',
      techBuroBalance: 'Balance in the current bureau expired with Tech Brothers',
      cebBuroBalance: 'Balance in the current bureau expired with CEB',
      mcrBuroBalance: 'Balance in the current bureau expired with MCR$',
      evergoBuroBalance: 'Balance in the current bureau expired with EVERGO',
      interenergyBuroBalance: 'Balance in the current bureau expired with INTERENERGY',
      edesBuroBalance: 'Balance in the current bureau expired with EDES',
      cancelRequest: 'Cancel procedure',
      beforeCancelRequest: 'Before finishing, please describe the reasons why you decided to terminate the process.',
      reasons: 'Reasons',
      save: 'Save',
    },
    validateDocs: {
      hasTitleProperty: 'Property has title',
      yesHasTitle: 'Yes, has a title',
      noHasTitle: 'Has no title',
      titleProperty: 'Property Title',
      idOwnerProperty: 'Identity card or passport of the owner of the property',
      buyContractProperty: 'Identity card or passport of the owner of the property',
      letterRequestService: 'Service request letter',
      currentNotarizedPower: 'Current Notarized Power of Attorney if applicable',
      others: 'Others',
      uploadDocs: 'Upload property documentation',
      legal: 'Legal',
      currentMercantileRegistry: 'Current Mercantile Registry',
      legalLetterRequestService: 'Legal Letter Request Service',
      legalOthers: 'Others',
      finishRequest: 'FINISH REQUEST',
    },
    changeOwnership: {
      titleChangeOwnership: 'CHANGE OF OWNERSHIP',
      formProcess: 'Process Functional Form Segment',
      suppliesChanged: 'Supplies to be changed',
      civilStatus: 'Civil status',
      idType: 'ID type',
      spouse: 'Spouse',
      customerDocument: 'Customer document',
      nameSurname: 'Name and surname of the spouse',
      nameBusinessName: 'Name or Business name',
      idSpouse: 'ID of the spouse',
      gender: 'Gender',
      spousePhone: "Spouse's phone number",
      modificationOwner: 'Modification of new owner contact data',
      phone: 'Phone',
      email: 'Email',
      socialNetworks: 'Social networks',
      socialNetwork: 'Social network',
      save: 'Guardar',
      transferDeposit: 'Transfer deposit to the new owner?',
      generateForm: 'Generate Transfer Form',
      transferCashier: 'Transfer to Cashier',
      finishProcess: 'Finish process',
      evolveProcess: 'Evolve process',
      male: 'Male',
      female: 'Female',
      idCard: 'Identification card',
      passport: 'Passport',
      rnc: 'RNC',
      single: 'Single',
      married: 'Married',
      widowed: 'Widowed',
      freeUnion: 'Free Union',
      twitter: 'Twitter',
      instagram: 'Instagram',
      telegram: 'Telegram',
      whatsApp: 'WhatsApp',
      savedSocial: 'Saved social network',
      doneSaveSocial: 'The social network has been saved in the trading system',
      accept: 'Accept',
      overdueDebts: 'Overdue debts',
      overdueMessage: 'It has overdue debts and the change of ownership cannot evolve. You can transfer to box',
      return: 'Return',
      finishProcedure: 'Finish procedure',
      finishProcedureMessage: 'Before finishing, please describe the reasons why you have decided to terminate the process.',
      observations: 'Observations',
    },
    clientValidation: {
      changeFrom: 'CHANGE FROM POSTPAID TO PREPAID',
      functionalForm: 'Functional form segment of the process',
      supplyNumber: 'Supply number',
      phone: 'Phone',
      customerType: 'Customer type',
      email: 'Email',
      documentationVal: 'Documentation validation',
      transferCustomer: 'Transfer Customer to Cashier',
      transferProcedure: 'Transfer Procedure to another ATC',
      finishProcess: 'Finish process',
      evolveProcess: 'Evolve process',
      supplyHasDocs: 'Supply has documentation attached',
      supplyNoHasDocs: 'Supply has no documentation attached',
      supplyHasAttachedDoc: 'Supply has documentation attached',
      copyProperty: 'Copy of property title',
      visualize: 'visualize',
      serviceReques: 'Service request letter',
      idCardPassport: 'Identity card or passport of the owner of the property',
      companyConstituent: 'Company constituent documents',
      currentMercantile: 'Current Mercantile Registry',
      legalizedDefinitive: 'Legalized definitive purchase contract',
      recordRnc: 'Record of RNC of the company',
      currentPower: 'Current power of attorney',
      notarizedPower: 'Notarized power of attorney',
      propertyPurchase: 'Property purchase contract',
      apscerLetter: 'APSCER Letter',
      physicalPerson: 'Physical person',
      legalPerson: 'Legal person (company)',
      finishProcedureMessage: 'The procedure has been completed successfully',
      accept: 'Accept',
      finishProcedure: 'Finish procedure',
    },
    paymentAgreement: {
      titlePaymentAgreement: 'PAYMENT AGREEMENT',
      funcitonalFormSegment: 'Functional form segment of the process',
      totalSupply: 'Total supply balance',
      totalOverdue: 'Total balance of overdue debt',
      typeCurrency: 'Type of currency',
      overdueBills: 'Overdue bills',
      overdueInvoice: 'Overdue invoice amount',
      amountFees: 'Amount of fees',
      viewCustomerAccount: 'View customer current account',
      inclueReport: 'Include report',
      authorizationRequired: 'Authorization required?',
      finishProcedure: 'Finish procedure',
      evolveProcess: 'Evolve process',
      includeReport: 'Include report',
      initialContribution: 'Initial Contribution Amount',
      payInitital: '% to pay initial',
      personAuthorize: 'Person to authorize',
      send: 'Send',
      initialAmountNoRepresent: 'The initial amount does not represent 30% of the debt\nDo you want to continue?',
      emailSent: 'Email sent',
      authMessageGenerated: 'An authorization message has been generated and sent to the indicated person',
      accept: 'Accept',
    },
    transferBail: {
      changeOwnership: 'CHANGE OF OWNERSHIP - TRANSFER TO BOND',
      holderTransfer: 'Holder to Transfer',
      clientUser: 'Client user',
      supply: 'Supply',
      customerId: 'Customer ID',
      totalTransferred: 'Total transferred',
      process: 'Process',
      transferCheckout: 'Transfer to Checkout',
      finishProcedure: 'Finish procedure',
      following: 'Following',
      totalTransfer: 'Total to transfer',
      cancel: 'Cancel',
      accept: 'Accept',
      amountAddes: 'Amount added',
      transferredTotal: 'The transferred total has been added in the trading system',
    },
    approvedTable: {
      technFeasibility: 'TECHNICAL FEASIBILITY',
      loadElecDevices: 'Load electrical devices on the approved table',
      select: 'Select',
      equipmentId: 'Team ID',
      typeElectrical: 'Type of electrical appliance',
      nominalPower: 'Nominal Power (kW)',
      amountEquipment: 'Amount of device',
      kwhPeriod: 'kWh per period',
      estimatedKwh: 'Estimated kWh',
      actions: 'Actions',
      addDevice: 'Add team',
      subFarmCost: 'Sub-farm interconnection costs',
      costBail: 'Cost of bail',
      interconnectionCost: 'Interconnection cost',
      costSubfarmInter: 'Cost of sub-farm interconnection',
      bailSummary: 'Bail Summary',
      export: 'Export',
      totalNumberRows: 'Total number of rows',
      totalPay: 'Total to pay',
      totalEquipmentPower: 'Total device power',
      noInterCostAuth: 'No interconnection cost Authorizations',
      totalQuantityEquip: 'Total Quantity of device',
      typeBail: 'Type of Bail',
      totalKwh: 'Total KW/h',
      send: 'Send',
      transferProcedureAtc: 'Transfer Procedure to another ATC',
      finishProcedure: 'Finish procedure',
      next: 'Next',
      commercialSuper: 'Commercial Superintendent',
      manager: 'Manager',
      commercialDirector: 'Commercial Director',
      normalBail: 'Normal Bail',
      bankSecurity: 'Bank security',
      edit: 'Edit',
      print: 'Print',
      delete: 'Delete',
      add: 'Add',
      cancel: 'Cancel',
      deviceAdded: 'Added device',
      registerCreated: 'The equipment record has been created.',
      accept: 'Accept',
      deleteDevice: 'Delete device',
      areSureDelete: 'Are you sure you want to delete the device {{id}}?',
      deletedDevice: 'Deleted device',
      deviceHasDeteled: 'Device {{id}} has been deleted',
      editDevice: 'Edit device',
      changesSaved: 'Changes saved',
      save: 'Save',
      changesHaveSaved: 'The changes to device {{id}} have been successfully saved.',
    },
    cancelSupply: {
      contractCancel: 'CONTRACT CANCELLATION',
      contractCancelForm: 'Contract cancellation form',
      supplyBalance: 'Supply Balance',
      totalBalanceOverdue: 'Total balance of overdue debt',
      balanceSheetStatus: 'Balance sheet status',
      detailed: 'Detailed current account',
      issueForm: 'issue form',
      transferProcedure: 'Transfer Procedure to another ATC',
      transferCustomer: 'Transfer Customer to cashier',
      finalizeProcedure: 'FINALIZE procedure',
      evolveProcess: 'Evolve process',
      unexpired: 'Unexpired',
      expired30: 'Expired in 30 days',
      expired60: 'Expired in 60 days',
      overdue90: 'Overdue in more than 90 days',
      checkingCurrent: 'Checking current client status',
      verifyingClient: "Verifying the client's debt status...",
      overdueDebts: 'Overdue debts',
      haveOverdueDebts: "You have overdue debts and this process cannot be progressed. The 'Transfer Customer to Cash' button has been enabled",
      return: 'Return',
    },
    invoiceInitialAmount: {
      title: 'Initial invoice amount',
      modalTitle: 'Invoice',
      name: 'Name or business name',
      contractType: 'Contract type',
      supplyNumber: 'Supply number',
      amount: 'Invoice unit amount',
      btnView: 'View Invoice',
    },
    unclaimedDeposits: {
      unclaimedDeposit: 'UNCLAIMED DEPOSIT',
      informationSupplies: 'Information on supplies and bonds',
      quantitySupplies: 'Quantity of supplies',
      bailBalance: 'Bail Balance',
      searchFilters: 'Search filters',
      cycle: 'Cycle',
      startDate: 'Start date',
      route: 'Route',
      endDate: 'End date',
      lookFor: 'Look for',
      cleanFields: 'Clean fields',
      searchResults: 'Search results',
      selectAll: 'Select all',
      supplyNumber: 'Supply number',
      name: 'Name',
      id: 'ID',
      amountInterest: 'Amount Interest Collected to Date',
      totalBail: 'Total bail amount',
      registrationDate: 'Registration date',
      integrationDate: 'Integration date',
      process: 'Process',
      confirmProcess: 'Confirm process',
      areyouSurePlaceOrders: 'Are you sure you want to place Payment Orders for the selected supplies?\n\nSelected Supplies: 000000001',
      cancel: 'Cancel',
      accept: 'Accept',
      processedSupplies: 'Processed supplies',
      paymentoOrdersCreated: 'PROTECON Payment Orders have been created for the following supplies:\n\nSelected supplies: 000000001',
    },
    changeOfOwnershipUploadDocuments: {
      swornDeclaration: 'Sworn Declaration by 7 legalized witnesses',
      truthDeclaration: 'Truth Declaration',
      newOwnerID: 'ID or Passport of the New Owner',
      representationPower: 'Current Power of Representation',
      propertyTitleCopy: 'Copy of the property title',
      apscerLetter: 'APSCER Letter',
      propertyOwnerID: 'ID or Passport of the property owner',
      propertyTenantID: 'ID or Passport of the property tenant',
      currentMercantileRegister: 'Current Mercantile Register',
      serviceRequestLetter: 'Service Request Letter',
      companyConstitutiveDocuments: 'Company Constitutive Documents',
      legalizedPurchaseContract: 'Legalized Final Purchase Contract',
      applicantID: 'ID or Passport of the Applicant',
      companyActOrRNC: 'Act or RNC of the Company',
      currentMercantileRegisterCertification: 'Certification of the current mercantile register',
      condominiumRNCAct: 'RNC Act of the Condominium',
      condominiumRepresentativeID: 'ID or Passport of the Condominium Representative',
      condominiumDeclaration: 'Condominium Declaration',
      condominiumConstitutionApproval: 'Approval of the Condominium Constitution',
      serviceContractAuthorizationAssemblyAct: 'Assembly Act authorizing the contracting of the energy service.',
      condominiumServiceRequestLetter: 'Condominium Service Contract Request Letter',
      serviceRequestLetterWithDecree: 'Service Request Letter mentioning the decree',
      selectLabel: 'Type of new customer owner',
      btnUploadDocument: 'Document upload',
      btnComplete: 'Complete',
      titleModule: 'Carga de documentos',
      documentEmptyLabel: 'Empty',
    },
  },
  auth: {
    login: {
      wellcome: 'Wellcome to Tech Brothers Systems!',
      login: 'Login',
      problems: 'Are you having problems logging in',
      instructions: 'Use the next botton to login',
      alert: 'Upon clicking the link, use your Microsoft username and password to access the system via Azure Active Directory.',
    },
  },
  profile: {
    title: 'MY PROFILE',
    userProfileInfo: 'User Profile Information',
    userPhoto: 'User Profile Photo',
    userProfileGeneralInfo: 'General User Profile Information',
    exit: 'Logout',
    name: 'User name',
    userId: 'User id',
    email: 'Email',
    role: 'User Role',
  },
  bailAgreement: {
    title: 'BAIL AGREEMENT',
    searchUser: 'Search User',
    supplyNumber: 'Supply Number',
    search: 'Search',
    supplyInformation: 'Supply Information',
    nameSocialReason: 'Name or Social Reason',
    currentBailAmountCharged: 'Current Bail Amount Charged',
    clientID: 'Client ID',
    bailAgreementForm: 'Bail Agreement Form',
    quantityFees: 'Quantity of Fees',
    amountFees: 'Amount of Fees',
    startingAmount: 'Starting Amount',
    dateInvoice2ndInstallment: 'Date to Invoice 2nd Installment',
    accordingSupplyTable: 'According Supply Table',
    selectAll: 'Select All',
    invoiceStatus: 'Invoice Status',
    invoiceNumber: 'Invoice Number',
    invoiceIssueDate: 'Invoice Issue Date',
    invoiceDueDate: 'Invoice Due Date',
    amount: 'Amount',
    payments: 'Payments',
    pendingBalance: 'Pending Balance',
    totalBalance: 'Total Balance',
    overdue: 'Overdue',
    actions: 'Actions',
    exit: 'Exit',
    process: 'Process',
    selectBail: 'select Bail',
  },
};
